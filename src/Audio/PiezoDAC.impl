#include "Piezo.h"
#include <soc/rtc.h>

PiezoImpl Piezo;

#ifdef CIRCUITOS_PIEZO_DAC_TIMER
#define TIMER CIRCUITOS_PIEZO_DAC_TIMER
#else
#define TIMER 0
#endif

#ifdef CIRCUITOS_PIEZO_DAC_SD
#define DAC_SD CIRCUITOS_PIEZO_DAC_SD
#else
#define DAC_SD 13
#endif

typedef struct {
	union {
		struct {
			uint32_t reserved0:   10;
			uint32_t alarm_en:     1;             /*When set  alarm is enabled*/
			uint32_t level_int_en: 1;             /*When set  level type interrupt will be generated during alarm*/
			uint32_t edge_int_en:  1;             /*When set  edge type interrupt will be generated during alarm*/
			uint32_t divider:     16;             /*Timer clock (T0/1_clk) pre-scale value.*/
			uint32_t autoreload:   1;             /*When set  timer 0/1 auto-reload at alarming is enabled*/
			uint32_t increase:     1;             /*When set  timer 0/1 time-base counter increment. When cleared timer 0 time-base counter decrement.*/
			uint32_t enable:       1;             /*When set  timer 0/1 time-base counter is enabled*/
		};
		uint32_t val;
	} config;
	uint32_t cnt_low;                             /*Register to store timer 0/1 time-base counter current value lower 32 bits.*/
	uint32_t cnt_high;                            /*Register to store timer 0 time-base counter current value higher 32 bits.*/
	uint32_t update;                              /*Write any value will trigger a timer 0 time-base counter value update (timer 0 current value will be stored in registers above)*/
	uint32_t alarm_low;                           /*Timer 0 time-base counter value lower 32 bits that will trigger the alarm*/
	uint32_t alarm_high;                          /*Timer 0 time-base counter value higher 32 bits that will trigger the alarm*/
	uint32_t load_low;                            /*Lower 32 bits of the value that will load into timer 0 time-base counter*/
	uint32_t load_high;                           /*higher 32 bits of the value that will load into timer 0 time-base counter*/
	uint32_t reload;                              /*Write any value will trigger timer 0 time-base counter reload*/
} hw_timer_reg_t;

typedef struct hw_timer_s {
	hw_timer_reg_t * dev;
	uint8_t num;
	uint8_t group;
	uint8_t timer;
	portMUX_TYPE lock;
} hw_timer_t;

typedef struct hw_timer_s hw_timer_t;

namespace CM {
	void IRAM_ATTR timerStop(hw_timer_t *timer){
		timer->dev->config.enable = 0;
	}

	void IRAM_ATTR timerWrite(hw_timer_t *timer, uint64_t val){
		timer->dev->load_high = (uint32_t) (val >> 32);
		timer->dev->load_low = (uint32_t) (val);
		timer->dev->reload = 1;
	}

	void IRAM_ATTR timerAlarmWrite(hw_timer_t *timer, uint64_t alarm_value, bool autoreload){
		timer->dev->alarm_high = (uint32_t) (alarm_value >> 32);
		timer->dev->alarm_low = (uint32_t) alarm_value;
		timer->dev->config.autoreload = autoreload;
	}

	void IRAM_ATTR timerAlarmDisable(hw_timer_t *timer){
		timer->dev->config.alarm_en = 0;
	}

	uint64_t IRAM_ATTR timerRead(hw_timer_t *timer){
		timer->dev->update = 1;
		while(timer->dev->update) delayMicroseconds(1);
		uint64_t h = timer->dev->cnt_high;
		uint64_t l = timer->dev->cnt_low;
		return (h << 32) | l;
	}
}

#define dis(timer) do { CM::timerAlarmDisable(timer); CM::timerStop(timer); CM::timerWrite(timer, 0); } while(0)

void PiezoImpl::begin(uint8_t pin){
	this->pin = pin;

	state = OFF;
	pinMode(DAC_SD, OUTPUT);
	digitalWrite(DAC_SD, HIGH);
	dacWrite(pin, 127);

	// Set up interrupt routine
	// 20 kHz, 50 uS

	if(timer != nullptr){
		timerEnd(timer);
		timer = nullptr;
	}

	timer = timerBegin(TIMER, 80, true);
	timerAttachInterrupt(timer, &timerInterrupt, true);    // P3= edge triggered
	dis(timer);

	noTone();
}

void PiezoImpl::tone(uint16_t freq, uint16_t duration){
	if(pin == (uint8_t) -1) return;
	if(mute) return;
	if(volume == 0) return;

	currentFreq = freq;
	currentDuration = duration;
	counter = 0;

	if(state == OFF){
		dis(timer);
		dacWrite(pin, 127);

		state = POWERING;
		digitalWrite(DAC_SD, LOW);

		timerAlarmWrite(timer, ampBootTime * 1000, true);
		timerAlarmEnable(timer);
		timerStart(timer);
	}else if(state == IDLE){
		state = ON;
		timerAlarmWrite(timer, 50, true);
		timerWrite(timer, 0);
	}
}

void PiezoImpl::noTone(){
	if(pin == (uint8_t) -1) return;
	if(state == IDLE) return;

	dis(timer);
	dacWrite(pin, 127);

	if(state == ON || state == POWERING){
		CM::timerAlarmWrite(timer, powerHold * 1000, true);
		timerAlarmEnable(timer);
		timerStart(timer);
		state = IDLE;
	}
}

void PiezoImpl::setMute(bool mute){
	this->mute = mute;

	if(mute){
		this->noTone();
	}
}

bool PiezoImpl::isMuted() const{
	return mute;
}

void IRAM_ATTR PiezoImpl::timerInterrupt(){
	PiezoImpl* piezo = &Piezo;

	if(piezo->state == OFF || piezo->mute || piezo->volume == 0){
		dis(piezo->timer);
		//ets_printf("OUT\n");
		return;
	}else if(piezo->state == POWERING){
		CM::timerAlarmWrite(piezo->timer, 50, true);
		piezo->state = ON;
		//ets_printf("POWERED\n");
	}else if(piezo->state == IDLE){
		dis(piezo->timer);
		piezo->state = OFF;
		digitalWrite(DAC_SD, HIGH);
		//ets_printf("OFF\n");
		return;
	}

	double value = sin((double) piezo->currentFreq * 2.0 * M_PI * ((double) piezo->counter / 20000.0)); // wave [-1, 1]
	// value /= 3.0; // counter voltage amplification
	// value /= 3.0; // make sure we don't draw too much current
	value *= (double) piezo->volume / 255.0; // apply volume [-1, 1]
	value = value / 2.0 + 0.5; // bring to [0, 1]
	value *= 255.0; // bring to [0, 255]
	value = value > 255 ? 255 : value; // clipping
	value = value < 0 ? 0 : value; // clipping

	dacWrite(piezo->pin, (uint8_t) value);
	//ets_printf("%d\n", (uint8_t) value);

	piezo->counter++;

	if(piezo->currentDuration != 0 && piezo->counter * 50 >= piezo->currentDuration * 1000){
		CM::timerAlarmWrite(piezo->timer, piezo->powerHold * 1000, true);
		piezo->state = IDLE;

		dacWrite(piezo->pin, 127);
		piezo->currentFreq = 0;
		piezo->currentDuration = 0;
		piezo->counter = 0;

		//ets_printf("DONE\n");
	}
}
